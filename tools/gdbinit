
# StarPU --- Runtime system for heterogeneous multicore architectures.
#
# Copyright (C) 2010-2015  Universit√© de Bordeaux
# Copyright (C) 2010, 2011, 2012  Centre National de la Recherche Scientifique
#
# StarPU is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or (at
# your option) any later version.
#
# StarPU is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU Lesser General Public License in COPYING.LGPL for more details.

define starpu-print-job
  set language c
  set $job = (struct _starpu_job *)$arg0

  printf "StarPU Job (%p)\n", $job
  if ($job != 0)
    printf "\ttask:\t\t\t\t<%p>\n", $job->task
    printf "\tsubmitted:\t\t\t<%d>\n", $job->submitted
    printf "\tterminated:\t\t\t<%d>\n", $job->terminated
    printf "\tjob_id:\t\t\t\t<%d>\n", $job->job_id
    if _starpu_use_fxt == 1
      if $job->model_name
        printf "\tmodel_name:\t\t\t<%s>\n", $job->model_name
      end
    end
  end
end

document starpu-print-job
Prints a StarPU job
end

define starpu-print-task
  set language c
  set $task = (struct starpu_task *)$arg0
  set $job = (struct _starpu_job *)$task->starpu_private
  set $status=0
  if $task->status == 0
    set $status="STARPU_TASK_INVALID"
  end
  if $task->status == 1
    set $status="STARPU_TASK_BLOCKED"
  end
  if $task->status == 2
    set $status="STARPU_TASK_READY"
  end
  if $task->status == 3
    set $status="STARPU_TASK_RUNNING"
  end
  if $task->status == 4
    set $status="STARPU_TASK_FINISHED"
  end
  if $task->status == 5
    set $status="STARPU_TASK_BLOCKED_ON_TAG"
  end
  if $task->status == 6
    set $status="STARPU_TASK_BLOCKED_ON_TASK"
  end
  if $task->status == 7
    set $status="STARPU_TASK_BLOCKED_ON_DATA"
  end

  printf "StarPU Task (%p)\n", $task
  printf "\tcodelet:\t\t\t<%p>\n", $task->cl
  printf "\tcallback:\t\t\t<%p>\n", $task->callback_func
  printf "\tsynchronous:\t\t\t<%d>\n", $task->synchronous
  printf "\texecute_on_a_specific_worker:\t<%d>\n", $task->execute_on_a_specific_worker
  printf "\tworkerid:\t\t\t<%d>\n", $task->workerid
  printf "\tdetach:\t\t\t\t<%d>\n", $task->detach
  printf "\tdestroy:\t\t\t<%d>\n", $task->destroy
  printf "\tregenerate:\t\t\t<%d>\n", $task->regenerate
  printf "\tstatus:\t\t\t\t<%s>\n", $status
  printf "\tjob:\t\t\t\t<%p>\n", $job
  printf "\tndeps:\t\t\t\t<%u>\n", $job->job_successors->ndeps
  printf "\tndeps_completed:\t\t<%u>\n", $job->job_successors->ndeps_completed
  printf "\tnsuccs:\t\t\t\t<%u>\n", $job->job_successors->nsuccs
  if $job
    starpu-print-job $job
  end
end

document starpu-print-task
Prints a StarPU task
end

define starpu-tasks-on-worker
  set language c
  set $worker=config->workers[$arg0]
  set $task=$worker.local_tasks.head
  while $task != 0x0
    starpu-print-task $task
    set $task=$task->next
  end
end

define starpu-tasks-on-workers
  set language c
  set $num=0
  while $num<config->topology->nworkers
    printf "Worker %s\n", config->workers[$num].name
    starpu-tasks-on-worker $num
    set $num = $num + 1
  end
end

define starpu-workers
  set language c
  set $num=0
  printf "[Id] Name                                     Arch Mask Devid Bindid Workerid Isrunning Isinitialized Status\n"
  while $num<config->topology->nworkers
    set $worker=&config->workers[$num]
    if $worker->status == STATUS_INVALID
      set $status="INVALID"
    end
    if $worker->status == STATUS_UNKNOWN
      set $status="UNKNOWN"
    end
    if $worker->status == STATUS_INITIALIZING
      set $status="INITIALIZING"
    end
    if $worker->status == STATUS_EXECUTING
      set $status="EXECUTING"
    end
    if $worker->status == STATUS_CALLBACK
      set $status="CALLBACK"
    end
    if $worker->status == STATUS_SCHEDULING
      set $status="SCHEDULING"
    end
    if $worker->status == STATUS_SLEEPING
      set $status="SLEEPING"
    end
    if $worker->status == STATUS_WAKING_UP
      set $status="WAKING_UP"
    end
    printf "[%2d] %-40s %-4d %-4d %-5d %-6d %-8d %-9d %-13d %s\n", $num, $worker->name, $worker->arch, $worker->worker_mask, \
          $worker->devid, $worker->bindid, $worker->workerid, $worker->worker_is_running, $worker->worker_is_initialized, $status
    set $num = $num + 1
  end
end

document starpu-workers
Prints a list of the StarPU workers
end

define starpu-tags
  printf "tags htbl %p\n", tag_htbl
  printf "TODO\n"
end

define starpu-tasks
  set language c
  set $num=0
  set $nsubmitted=0
  set $nready=0
  while $num<config->topology->nsched_ctxs
  	set $nsubmitted = $nsubmitted + config->sched_ctxs[$num]->tasks_barrier->barrier->reached_start 
  	set $nready = $nready + config->sched_ctxs[$num]->ready_tasks_barrier->barrier->reached_start
	set $num = $num + 1
  end
  printf "%d submitted tasks\n", $nsubmitted
  printf "%d ready tasks\n", $nready
  printf "Tasks being run:\n"
  set $n = 0
  while $n < config.topology.nworkers
    set $task = config.workers[$n].current_task
    if ($task)
      printf "worker %d:\n", $n
      starpu-print-task $task
      set $j = (struct _starpu_job *) $task->starpu_private
      set $nsuccs = $j->job_successors.nsuccs
      set $i = 0
      while $i < $nsuccs
        set $cg = $j->job_successors.succ[$i]
	if ($cg->cg_type == 1)
	  # STARPU_CG_APPS
	  printf "waited for by application"
	end
	if ($cg->cg_type == 2)
	  # STARPU_CG_TAG
	  printf "will produce tag %x\n", $cg->succ.tag
	end
	if ($cg->cg_type == 4)
	  # STARPU_CG_TASK
	  printf "dep of task %p\n", $cg->succ.job
	  starpu-print-task $cg->succ.job->task
	end
        set $i = $i + 1
      end
    end
    set $n = $n + 1
  end
  if (tag_htbl)
    printf "TODO: tags\n"
  end
  print "TODO: complete\n"
end

define starpu-all-tasks
  set language c
  set $j = all_jobs_list
  while $j != 0
    printf "task %p\n", $j->task
    set $j = $j->next_all
  end
end

define starpu
  printf "Here I am...\n"
end

define starpu-print-mode
  if ($arg0 & 1)
    printf "R"
  end
  if ($arg0 & 2)
    printf "W"
  end
  if ($arg0 & 4)
    printf " SCRATCH"
  end
  if ($arg0 & 8)
    printf " REDUX"
  end
end

define starpu-print-data
  set language c
  set $data = (starpu_data_handle_t) $arg0
  printf "Data handle %p\n", $data
  if $data->ops->interfaceid == 0
    printf "Matrix\n"
  end
  if $data->ops->interfaceid == 1
    printf "Block\n"
  end
  if $data->ops->interfaceid == 2
    printf "Vector\n"
  end
  if $data->ops->interfaceid == 3
    printf "CSR\n"
  end
  if $data->ops->interfaceid == 4
    printf "BCSR\n"
  end
  if $data->ops->interfaceid == 5
    printf "Variable\n"
  end
  if $data->ops->interfaceid == 6
    printf "Void\n"
  end
  if $data->ops->interfaceid == 7
    printf "Multiformat\n"
  end
  if $data->ops->interfaceid == 8
    printf "COO\n"
  end
  if $data->ops->interfaceid > 8
    printf "Interface id %d\n", $data->ops->interfaceid
  end
  printf "Home node %d\n", $data->home_node
  printf "RWlock refs %d\n", $data->refcnt
  printf "Busy count %d\n", $data->busy_count
  printf "Current mode "
  starpu-print-mode $data->current_mode
  printf "\n"
  if $data->current_mode & (4|8)
    set $n = 0
    while $n < config.topology.nworkers
      set $replicate = $data->per_worker[$n]
      printf "Worker %2d %10s:", $n, config->workers[$n]->name
      if $replicate.state == 0
        printf " OWNER"
      end
      if $replicate.state == 1
        printf " SHARED"
      end
      if $replicate.state == 2
        printf " INVALID"
      end
      if $replicate.initialized
        printf " initialized"
      end
      printf "\n"
      set $n = $n + 1
    end
  else
    set $n = 0
    while $n < descr.nnodes
      set $replicate = &$data->per_node[$n]
      printf "Node %2d (%2d):", $n, $replicate->refcnt
      if $replicate.state == 0
        printf " OWNER"
      end
      if $replicate.state == 1
        printf " SHARED"
      end
      if $replicate.state == 2
        printf " INVALID"
      end
      if $replicate.initialized
        printf " initialized"
      end
      printf "\n"
      set $m = 0
      while $m < descr.nnodes
        if $replicate->request[$m]
	  printf " request %p from %d\n", $replicate->request[$m], $m
	end
        set $m = $m + 1
      end
      set $n = $n + 1
    end
  end
  printf "Post sync tasks\n"
  set $tasklist = $data->post_sync_tasks
  while $tasklist != 0x0
    starpu-print-task $tasklist->task
    set $tasklist = $tasklist->next
  end
  printf "Requester tasks\n"
  set $requesterlist = $data->req_list._head
  while $requesterlist != 0x0
    printf "mode: "
    starpu-print-mode $requesterlist->mode
    printf "\n"
    starpu-print-job $requesterlist->j
    set $requesterlist = $requesterlist->_next
  end
  if ($data->nchildren)
    printf "%d children\n", $data->nchildren
  end
end

define starpu-print-datas
  set $entry = registered_handles
  while $entry
    starpu-print-data $entry->handle
    printf "\n"
    set $entry = (struct handle_entry *) $entry.hh.next
  end
end

define starpu-print-datas-summary
  set language c
  set $entry = registered_handles

  set $data_n = 0
  set $pw_data_n = 0
  set $data_n_allocated = 0
  set $replicate_n_owners = 0
  set $replicate_n_shared = 0
  set $replicate_n_invalid = 0
  set $replicate_n_initialized = 0
  set $replicate_n_allocated = 0
  set $pw_replicate_n_owners = 0
  set $pw_replicate_n_shared = 0
  set $pw_replicate_n_invalid = 0
  set $pw_replicate_n_initialized = 0
  set $pw_replicate_n_allocated = 0

  while $entry
    set $data = (starpu_data_handle_t) $entry->handle
  
    if $data->current_mode & (4|8)
      set $pw_data_n = $pw_data_n + 1
      set $n = 0
      while $n < config.topology.nworkers
        set $replicate = $data->per_worker[$n]
        if $replicate.state == 0
          set $pw_replicate_n_owners = $pw_replicate_n_owners + 1
        end
        if $replicate.state == 1
          set $pw_replicate_n_shared = $pw_replicate_n_shared + 1
        end
        if $replicate.state == 2
          set $pw_replicate_n_invalid = $pw_replicate_n_invalid + 1
        end
        if $replicate.initialized
          set $pw_replicate_n_initialized = $pw_replicate_n_initialized + 1
        end
        if $replicate.allocated
          set $pw_replicate_n_allocated = $pw_replicate_n_allocated + 1
        end
        set $n = $n + 1
      end
    else
      set $data_n = $data_n + 1
      set $n = 0
      while $n < descr.nnodes
        set $replicate = &$data->per_node[$n]
        if $replicate.state == 0
          set $replicate_n_owners = $replicate_n_owners + 1
        end
        if $replicate.state == 1
          set $replicate_n_shared = $replicate_n_shared + 1
        end
        if $replicate.state == 2
          set $replicate_n_invalid = $replicate_n_invalid + 1
        end
        if $replicate.initialized
          set $replicate_n_initialized = $replicate_n_initialized + 1
        end
        if $replicate.allocated
          set $replicate_n_allocated = $replicate_n_allocated + 1
	  set $data_allocated = 1
        end
        set $n = $n + 1
      end
      if $data_allocated
        set $data_n_allocated = $data_n_allocated + 1
      end
    end
    set $entry = (struct handle_entry *) $entry.hh.next
  end
  printf "Number of handles: %d\n", $data_n
  printf "Number of allocated handles: %d\n", $data_n_allocated
  printf "Number of OWNER replicates: %d\n", $replicate_n_owners
  printf "Number of SHARED replicates: %d\n", $replicate_n_shared
  printf "Number of INVALID replicates: %d\n", $replicate_n_invalid
  printf "Number of initialized replicates: %d\n", $replicate_n_initialized
  printf "Number of allocated replicates: %d\n", $replicate_n_allocated

  printf "Number of per-worker handles: %d\n", $pw_data_n
  printf "Number of OWNER per-worker replicates: %d\n", $pw_replicate_n_owners
  printf "Number of SHARED per-worker replicates: %d\n", $pw_replicate_n_shared
  printf "Number of INVALID per-worker replicates: %d\n", $pw_replicate_n_invalid
  printf "Number of initialized per-worker replicates: %d\n", $pw_replicate_n_initialized
  printf "Number of allocated per-worker replicates: %d\n", $pw_replicate_n_allocated
end

define starpu-print-request
  set $r = (struct _starpu_data_request *)$arg0
  printf "Request %p\n", $r
  printf "Refcnt %d\n", $r->refcnt
  printf "Handle %p\n", $r->handle
  printf "src_replicate %p\n", $r->src_replicate
  printf "dst_replicate %p\n", $r->dst_replicate
  printf "handling_node %d\n", $r->handling_node
  if ($r->mode & 1)
    printf "R"
  end
  if ($r->mode & 2)
    printf "W"
  end
  if ($r->mode & 4)
    printf "S"
  end
  if ($r->mode & 8)
    printf "X"
  end
  printf "\n"
  printf "completed: %d\n", $r->completed
  printf "prefetch: %d\n", $r->prefetch
  printf "retval: %d\n", $r->retval
  printf "ndeps: %d\n", $r->ndeps
  printf "next_req_count: %d\n", $r->next_req_count
  printf "comid: %u\n", $r->com_id
  set $c = $r->callbacks
  while $c != 0
    printf "callback: %p %p\n", $c->callback_func, $c->callback_arg
    set $c = $c->next
  end
end

define starpu-print-requests
  set $node = 0
  while $node < descr.nnodes
    printf "Node %u:\n", $node
    set $request = data_requests[$node]._head
    while $request != 0
      printf " Request %p: handle %p ", $request, $request->handle
      starpu-print-mode $request->mode
      printf "\n"
      set $request = $request->_next
    end
    set $node = $node + 1
  end
end

define starpu-print-prequests
  set $node = 0
  while $node < descr.nnodes
    printf "Node %u:\n", $node
    printf "%u pending requests\n", data_requests_npending[$node]
    set $request = data_requests_pending[$node]._head
    while $request != 0
      printf " Request %p: handle %p ", $request, $request->handle
      starpu-print-mode $request->mode
      printf "\n"
      set $request = $request->_next
    end
    set $node = $node + 1
  end
end

define starpu-print-frequests
  set $node = 0
  while $node < descr.nnodes
    printf "Node %u:\n", $node
    set $request = prefetch_requests[$node]._head
    while $request != 0
      printf " Request %p: handle %p ", $request, $request->handle
      starpu-print-mode $request->mode
      printf "\n"
      set $request = $request->_next
    end
    set $node = $node + 1
  end
end

define starpu-memusage
  set scheduler-locking on
  set $node = 0
  while $node < descr.nnodes
    printf "Node %u:\n", $node
    set $total = 0
    set $total_b = 0
    set $wt = 0
    set $wt_b = 0
    set $home = 0
    set $home_b = 0
    set $redux = 0
    set $redux_b = 0
    set $relax = 0
    set $relax_b = 0
    set $noref = 0
    set $noref_b = 0
    set $nodataref = 0
    set $nodataref_b = 0
    set $nosubdataref = 0
    set $nosubdataref_b = 0
    set $mc = mc_list[$node]->_head
    while $mc != 0
      set $handle = $mc->data
      set $size = _starpu_data_get_size($handle)
      set $total = $total + 1
      set $total_b = $total_b + $size
      if $handle->wt_mask & (1 << $node)
        set $wt = $wt + 1
	set $wt_b = $wt_b + $size
      end
      if $node == $handle->home_node
        set $home = $home + 1
	set $home_b = $home_b + $size
      end
      if $mc->relaxed_coherency == 2
        set $redux = $redux + 1
	set $redux_b = $redux_b + $size
      end
      if $mc->relaxed_coherency == 1
        set $relax = $relax + 1
	set $relax_b = $relax_b + $size
        if $mc->replicate
          if $mc->replicate->refcnt == 0
            set $noref = $noref + 1
	    set $noref_b = $noref_b + $size
          end
        end
      end
      if $mc->relaxed_coherency == 0
        if (may_free_subtree($handle,$node))
	  set $nosubdataref = $nosubdataref + 1
	  set $nosubdataref_b = $nosubdataref_b + $size
	end
        if $handle->per_node[$node].refcnt == 0
          set $nodataref = $nodataref + 1
	  set $nodataref_b = $nodataref_b + $size
        end
      end
      set $mc = $mc->_next
    end
    printf "  Total: %u, %u\n", $total, $total_b
    printf "  WT: %u, %u\n", $wt, $wt_b
    printf "  home: %u, %u\n", $home, $home_b
    printf "  redux: %u, %u\n", $redux, $redux_b
    printf "  relax: %u, %u\n", $relax, $relax_b
    printf "  noref: %u, %u\n", $noref, $noref_b
    printf "  nosubdataref: %u, %u\n", $nosubdataref, $nosubdataref_b
    printf "  nodataref: %u, %u\n", $nodataref, $nodataref_b
    set $node = $node + 1
  end
end

document starpu
List of StarPU-specific gdb functions:
starpu-workers          prints a list of the StarPU workers
starpu-tasks-on-workers prints a list of the tasks currently running on workers
starpu-tasks-on-worker  prints a list of the tasks running on the given worker
starpu-print-job        prints a StarPU job
starpu-print-task       prints a StarPU task
starpu-print-data       prints a StarPU data handle
starpu-print-datas      prints all StarPU data handles
starpu-print-datas-summary  prints a summary of data handles
starpu-print-request    prints a StarPU data request
starpu-print-requests   prints all StarPU data requests
starpu-print-prequests  prints all pending StarPU data requests
starpu-print-frequests  prints all StarPU prefetch data requests
starpu-tasks            prints a list of the tasks flowing in StarPU
starpu-all-tasks        prints a list of all the tasks flowing in StarPU
starpu-tags             prints a list of the tags known to StarPU
starpu-memusage         prints the memory node usage
end
